type EventId = record {
    T: text;
};

type TimeStamp = record{
    T: int;
}

type Kind = record{
    T:nat;
}

type Kinds = record{
    T: vec<Kind>;
}

type Tag = record{
    T : vec<text>;
}

type Tags = record{
    T: vec<Tag>;
}

type KeyValuePair = record {
  key: text;
  value: Tag;
};

type TagMap= vec<KeyValuePair>;


type Event = record{
    id: EventID;
    pubkey: text;
    createdAt: TimeStamp;
    kind: Kind;
    tags: Tags;
    content: text;
    sig: text;
};


type Filter = record{
    ids: Tag;
    kinds: Kinds;
    authors: Tag;
    tags: TagMap;
    since: TimeStamp;
    until: TimeStamp;
    limit: int;
    search: text;
};
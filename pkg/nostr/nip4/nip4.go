package nip4

import (
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/Hubmakerlabs/replicatr/pkg/ec/secp256k1"
	"github.com/Hubmakerlabs/replicatr/pkg/nostr/bech32encoding"
	"github.com/Hubmakerlabs/replicatr/pkg/slog"
)

var log = slog.GetStd()

// ComputeSharedSecret computes an Elliptic Curve Diffie Hellman shared secret
// out of one public key and another secret key.
//
// The public key and secret key for this can be either hex or bech32 formatted,
// since this is easily determined by reading the first 4 bytes of the string
func ComputeSharedSecret(pub string, sec string) (secret []byte, err error) {
	if len(pub) < bech32encoding.MinKeyStringLen {
		err = fmt.Errorf("public key is too short, must be at least %d, "+
			"'%s' is only %d chars", bech32encoding.MinKeyStringLen, pub, len(pub))
		return
	}
	if len(sec) < bech32encoding.MinKeyStringLen {
		err = fmt.Errorf("public key is too short, must be at least %d, "+
			"'%s' is only %d chars", bech32encoding.MinKeyStringLen, pub, len(pub))
		return
	}
	var s *secp256k1.SecretKey
	var p *secp256k1.PublicKey
	// if the first 4 chars are a Bech32 HRP try to decode as Bech32
	if pub[:bech32encoding.Bech32HRPLen] == bech32encoding.PubHRP {
		if p, err = bech32encoding.NpubToPublicKey(pub); log.Fail(err) {
			return
		}
	} else {
		if p, err = bech32encoding.HexToPublicKey(pub); log.Fail(err) {
			return
		}
	}
	// if the first 4 chars are a Bech32 HRP try to decode as Bech32
	if sec[:bech32encoding.Bech32HRPLen] == bech32encoding.SecHRP {
		if s, err = bech32encoding.NsecToSecretKey(sec); log.Fail(err) {
			return
		}
	} else {
		if s, err = bech32encoding.HexToSecretKey(sec); log.Fail(err) {
			return
		}
	}
	return secp256k1.GenerateSharedSecret(s, p), err
}

func GenerateSharedSecret(s *secp256k1.SecretKey, p *secp256k1.PublicKey) []byte {
	return secp256k1.GenerateSharedSecret(s, p)
}

// Encrypt encrypts message with key using aes-256-cbc. key should be the shared
// secret generated by ComputeSharedSecret.
//
// Returns: base64(encrypted_bytes) + "?iv=" + base64(initialization_vector).
func Encrypt(message string, key []byte) (string, error) {
	// block size is 16 bytes
	iv := make([]byte, 16)
	// can probably use a less expensive lib since IV has to only be unique; not
	// perfectly random; math/rand? ed: https://github.com/lukechampine/frand
	// but this is not high volume throughput and only one good IV is needed per
	// 4gb of data at most.
	if _, err := rand.Read(iv); err != nil {
		return "", fmt.Errorf("error creating initization vector: %w", err)
	}
	// automatically picks aes-256 based on key length (32 bytes)
	block, err := aes.NewCipher(key)
	if err != nil {
		return "", fmt.Errorf("error creating block cipher: %w", err)
	}
	mode := cipher.NewCBCEncrypter(block, iv)
	plaintext := []byte(message)
	// add padding
	base := len(plaintext)
	// this will be a number between 1 and 16 (inclusive), never 0
	bs := block.BlockSize()
	padding := bs - base%bs
	// encode the padding in all the padding bytes themselves
	padText := bytes.Repeat([]byte{byte(padding)}, padding)
	paddedMsgBytes := append(plaintext, padText...)
	ciphertext := make([]byte, len(paddedMsgBytes))
	mode.CryptBlocks(ciphertext, paddedMsgBytes)
	return base64.StdEncoding.EncodeToString(ciphertext) + "?iv=" +
		base64.StdEncoding.EncodeToString(iv), nil
}

// Decrypt decrypts a content string using the shared secret key.
// The inverse operation to message -> Encrypt(message, key).
func Decrypt(content string, key []byte) ([]byte, error) {
	parts := strings.Split(content, "?iv=")
	if len(parts) < 2 {
		return nil, fmt.Errorf(
			"error parsing encrypted message: no initialization vector")
	}
	ciphertext, err := base64.StdEncoding.DecodeString(parts[0])
	if err != nil {
		return nil, fmt.Errorf(
			"error decoding ciphertext from base64: %w", err)
	}
	var iv []byte
	iv, err = base64.StdEncoding.DecodeString(parts[1])
	if err != nil {
		return nil, fmt.Errorf("error decoding iv from base64: %w", err)
	}
	var block cipher.Block
	block, err = aes.NewCipher(key)
	if err != nil {
		return nil, fmt.Errorf("error creating block cipher: %w", err)
	}
	mode := cipher.NewCBCDecrypter(block, iv)
	plaintext := make([]byte, len(ciphertext))
	mode.CryptBlocks(plaintext, ciphertext)
	// remove padding
	var (
		message      = plaintext
		plaintextLen = len(plaintext)
	)
	if plaintextLen > 0 {
		// the padding amount is encoded in the padding bytes themselves
		padding := int(plaintext[plaintextLen-1])
		if padding > plaintextLen {
			return nil, fmt.Errorf("invalid padding amount: %d", padding)
		}
		message = plaintext[0 : plaintextLen-padding]
	}
	return message, nil
}
